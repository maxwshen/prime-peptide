# 
from __future__ import division
import _config
import sys, os, fnmatch, datetime, subprocess
sys.path.append('/home/unix/maxwshen/')
import numpy as np
from collections import defaultdict
from mylib import util
import pandas as pd

# Default params
inp_dir = _config.OUT_PLACE + 'mle_f_effect_tests/'
NAME = util.get_fn(__file__)
out_dir = _config.OUT_PLACE + NAME + '/'
util.ensure_dir_exists(out_dir)

exp_design = pd.read_csv(_config.DATA_DIR + 'master_exp_design.csv')
conds = exp_design['Name']

##
# Statistics
##
def get_mc_control_effects(cdf):
  n_per_row = int(hparams['n'] // len(cdf)) + 1

  samples = []
  for idx, row in cdf.iterrows():
    alpha_col = 'Posterior alpha' 
    beta_col = 'Posterior beta'
        
    try:
      samples += list(np.random.beta(row[alpha_col], row[beta_col], size = n_per_row))
    except:
      continue

  samples = np.array(samples)
  return samples[:hparams['n']]


##
# Primary
##
def annotate(target, stat_col, exp_subset):
  df = pd.read_csv(inp_dir + f'{target}_{stat_col}_{exp_subset}.csv', index_col = 0)

  print(f'Removing duplicates ... ')
  print(len(df))
  df = df.drop_duplicates(subset = ['Name'])
  print(len(df))

  # Calculate FDR
  df = df.sort_values(by = 'Welch T-test p-value', ascending = True)
  df = df.reset_index(drop = True)

  num_tests = len(df)
  rejected = False
  dd = defaultdict(list)
  for idx, row in df.iterrows():
    p = row['Welch T-test p-value']    
    threshold = 0.05 * ((idx + 1) / num_tests)

    if not rejected:
      if p >= threshold:
        rejected = True
        dd['FDR 0.05'].append(False)
      else:
        dd['FDR 0.05'].append(True)
    else:
      dd['FDR 0.05'].append(False)

  for col in dd:
    df[col] = dd[col]

  # Mean N
  ec_cols = [col for col in df.columns if 'Total' in col]
  df['Mean Total'] = df[ec_cols].apply(np.mean, axis = 'columns')

  # print(sum(df['FDR 0.05']))
  print('FDR hits:', sum(df['FDR 0.05']))

  df.to_csv(out_dir + f'{target}_{stat_col}_{exp_subset}.csv')

  return


##
# qsub
##
def gen_qsubs():
  # Generate qsub shell scripts and commands for easy parallelization
  print('Generating qsub scripts...')
  qsubs_dir = _config.QSUBS_DIR + NAME + '/'
  util.ensure_dir_exists(qsubs_dir)
  qsub_commands = []

  num_scripts = 0
  
  targets = _config.targets
  exp_subsets = _config.exp_subsets
  # Function calls
  for target in targets:
    stat_cols = _config.stat_cols

    for stat_col in stat_cols:
      for exp_subset in exp_subsets:

        command = 'python %s.py %s %s %s' % (NAME, target, stat_col, exp_subset)
        script_id = NAME.split('_')[0]

        # Write shell scripts
        sh_fn = qsubs_dir + 'q_%s_%s_%s_%s.sh' % (script_id, target, stat_col, exp_subset)
        with open(sh_fn, 'w') as f:
          f.write('#!/bin/bash\n%s\n' % (command))
        num_scripts += 1

        # Write qsub commands
        qsub_commands.append('qsub -P regevlab -V -l h_rt=8:00:00 -wd %s %s &' % (_config.SRC_DIR, sh_fn))

  # Save commands
  commands_fn = qsubs_dir + '_commands.sh'
  with open(commands_fn, 'w') as f:
    f.write('\n'.join(qsub_commands))

  subprocess.check_output('chmod +x %s' % (commands_fn), shell = True)

  print('Wrote %s shell scripts to %s' % (num_scripts, qsubs_dir))
  return


##
# Main
##
@util.time_dec
def main(argv):
  print(NAME)
  
  [target, stat_col, exp_subset] = argv
  print(target, stat_col)
  annotate(target, stat_col, exp_subset)

  return


if __name__ == '__main__':
  if len(sys.argv) > 2:
    main(sys.argv[1:])
  else:
    gen_qsubs()
